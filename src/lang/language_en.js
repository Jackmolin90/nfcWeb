export default {
  login: {
    welcome: 'Login Please',
    logIn: 'Login',
    username: 'Please Enter User Account',
    password: 'Please Enter Your Password',
    noAccount: 'No Account',
    goRegister: 'Go to Register'
  },
  register: {
    welcome: 'Welcome to Register',
    reg: 'Register',
    phone: 'Enter Email',
    imgCode: 'Enter Calculation Results',
    emailCode: 'Enter Email Verification Code',
    getCode: 'Get Code',
    password: 'Set a Password of 6-20 Digits',
    confirmPassword: 'Enter Password Again',
    hasAccount: 'Already Have an Account',
    goLogin: 'Go to Login',
    success: 'Success,login please!',
    getEmailCode: '{0}s send again',
    sendCodeError: 'Email and code cannot be empty'
  },
  user: {
    title: 'Personal Information',
    email: 'Email'
  },
  comm: {
    fail:"Fail",
    success: 'Success',
    clickLoad: 'Click to load more',
    bottomLine: 'No more~',
    just: ' just ',
    second: ' secs ',
    minute: ' min ',
    hour: ' hr ',
    day: ' days ',
    week: ' weeks ',
    month: ' months ',
    year: ' years ',
    time: 'Time',
    before: 'ago',
    firstPage: 'First',
    lastPage: 'Last',
    goto: "Go to",
    page: "Page",
    show: 'Show',
    selected: 'Select',
    records: 'Records',
    noData: 'No Data',
    nav: 'Navigation',
    language: 'Language',
    community: 'Community',
    searchTips: 'Search by Address / Txn Hash / Block',
    search: 'Search',
    alreadyTran: 'Verified Txns',
    waitTran: 'Pending Txns',
    close: 'Cancel',
    searchNoData: 'No information related to “{0}” ！',
    backToHome: 'Back',
    server: 'Server',
    pocket: 'Wallet',
    website: 'NetFlowCoin Website',
    intro: 'NFCScan is a block explorer and data service platform based on the Netflowcoin public chain. It provides various types of mining data, blockchain data query, pledge lock data of Netflowcoin.'
  },
  page_404: {
    copyright: 'Copyright',
    company: 'NfcScan',
    tips:
      'Please check whether the url you entered is correct, please click the following button to return to the home page or send an error report',
    back_home: 'Back HomePage',
    msg_content: 'This page can not going...'
  },

  pagination: {
    show: "Show",
    redord: "Records ",
    pages: "Page {curPage} of {totalPage}",
    first: "First",
    last: "Last",
  },

  home: {
    language: 'Language',
    lang_cn: 'Chinese',
    lang_en: 'English',
    overview: 'Network Overview',
    network: '',    
    totalBlocks: 'Blocks',
    totalTrans: 'Transactions',
    walletAddr: 'Accounts',
    avgBlockTime: 'Avg Block Interval',
    home: 'Home',
    blockchain: 'Block Chain',
    pledgeLock: 'Lock&Pledge',
    block: 'Blocks',
    tran: 'Transactions',
    destroy: "Burnt NFC",
    mining: 'Mining',
    absent: 'Absent',
    show: 'Unfold',
    hide: 'Fold',
    showMore: 'More',
    currentBlockNumber: 'Total {0} Blocks',
    tranNumber: '{0} Txns',
    verificationNode: 'Witness Node',
    blockReward: 'Block Reward',
    seeMore: 'More',
    currentTranNumber: 'Total {0} Transactions',
    tranValue: 'Value',
    handleFee: 'Fee',
    blockTranNumber: 'Txn',
    from: 'From',
    to: 'To',
    more: 'More',
    power: 'Current Netflow Revenue Ratio',
    miner: 'Active Miner',
    interest: 'Reward Pool',
    flow: 'Total NetWork Flow',
    circulation: 'Total Circulation Quantity',
    dug: 'Total Dug Quantity',
    pledge: 'Total Pledge Quantity',
    lock: 'Total Lock Up Quantity',
    totalTransactionValue: 'Total Network Transaction',
    yesterTransactionValue: 'New Transactions Yesterday',
    yesterNewAccount: 'Address Added Yesterday',
    voterSize: 'Current Voters',
    voterTotal: 'Current Total Votes',
    voterProportion: 'Voting Participation',
    desnfc: 'Burnt NFC',
    lastoutput: "24h NFC Production",
    nextelection: "Next Election Block Height",
    effectiveforce: "Network Bandwidth Power",
    totalBlockNumber: "Block Height",
    flowminingpledge:"Current Bandwidth Pledge",
    CirculatingRate:"Circulating Rate",
    CirculatingSupply:"Circulating Supply",
    Transactions:"24h Transactions",
    TotalAccount:"Total Account",
    AverageBlockInterval:"Average Block Interval",
    TotalMaxSupply:"Total Max Supply",
    BlockReward:"Block Reward",
    currentNetWork:"Current NetWork: Mainnet",
    addNetFlowCoin:"Add NetFlowCoin Network",
    footerText:"Powered by NetFlowCoin Chain | Built by Metaspacescan team<br/>Metaspacescan.io is a blockchain explorer and data service platform.It provides various types of mining data, blockchain data query and visualization charts, etc.",
   
  },
  blockinfo: {
    hash: 'Hash',
    parentHash: 'Parent Hash',
    difficulty: 'Difficulty',
    totalDifficulty: 'Total Difficulty',
    nonce: 'Nonce'
  },
  mining: {
    mining: 'Mining',
    type: 'Type',
    flow: 'Flow Mining',
    block: 'Block Mining',
    miningNumber: 'Mining Number',
    minerAddress: 'Miner Address',
    currentMiningNumber: 'Total {0} Mining',
  },
  absent: {
    absent: 'Absent',
    absentRecord: 'Absent Record',
    currentAbsentNumber: 'Total {0} Absent Records',
    absentSearch: 'Search by Address',
    order: 'Order',
    punishScore: 'Penalty Point',
    
    punishPledgeNumber: 'Punishment Pledge Number',
    punishCause: 'Penalty Cause',
    punishTime: 'Time',
    address: 'Node Address',
    absentType: 'Type',
    absentType1: 'Absent Block',
    absentType2: 'Not Involved Block',
    blockNumber: 'Block'
  },
  node: {
    nodeManage: 'Block Miner',
    nodeList: 'Node List',
    candidateNode: 'Pre-Candidate Node',
    witnessNode: 'Witness Node',
    signoutNode: 'Exited Node',
    order: 'Rank',
    nodeAddress: 'Node',
    nodetype: 'Node Type',
    pledgeAmount: 'Pledge Amount',
    punishScore: 'Penalty Point',
    nowpunishScore: 'Now Punishment',
    pledgeTime: 'Pledge Time(UTC)',
    nodeSearch: 'Search by Address',
    nodeSignoutSearch: 'Search by Address',
    nodeWitnessSearch: 'Search by Address',
    operation: 'Operation',
    currentCandidateNumber: 'Total {0} Pre-Candidate Nodes',
    currentWitnessNumber: 'Total {0} Witness Nodes',
    currentSignoutNumber: 'Total {0} Exited Nodes',
    recharge: 'Recharge',
    repairPayment: 'Supplementary Payment',
    punishRepairPayment: 'Pay',
    punishRepairPaymentLog:"Penalty Point Log",
    punishRecharge: 'Penalty Point Recharge',
    RechargeCreditScore: 'Recharge Credit Score',
    estimatedPayment: 'Estimated Payment',
    rechargeRecord: 'Recharge Record',
    rechargeAddress: 'Recharge Address',
    valueNFC: 'Value NFC',
    rechargeTime: 'Recharge Time',
    rechargeHeight: 'Block',
    nodepledge: 'Pledge',
    pledge: 'Pledge',
    address: 'Node Address',
    pledgerecord: 'Pledge Record',
    serialnumber: 'Order Number',
    blockNumber: 'Block',
    pledgetime: 'Pledge Time(UTC)',
    Lastpledgetime:"Last Pledge(UTC)"
  },
  lock: {
    Releasetype:"Release Type",
    lockRelease: 'Lock&Release',
    lock: 'Lock',
    extract: 'Extract',
    currentLockNumber: 'Total {0} Locking',
    currentReleaseNumber: 'Total {0} Records',
    lockSearch: 'Search by Address',
    pledgeSearch: 'Search Pledge Address',
    extractSearch: 'Search Extract Address',
    order: 'Order Number',
    type: 'Lock Type',
    address: 'Lock Address',
    totalAmount: 'Amount',
    leftAmount: 'Unlocked Amount',
    lockNumber: 'Unlock Time',
    teamLock: 'Team Lock',
    teamFreed: 'Team Freed',
    nodeaward:"Block Reward Lock",
    nodeawardAmount:"Block Reward",
    nodeawardNumber:"Block Rewards",
    nodeawardFreed:"Block Reward Release",
    nodeLock: 'PoS Pledge Lock',
    nodeFreed: 'PoS Pledge Release',
    flowLock: 'Flow Reward Lock',
    flowFreed: 'Flow Reward Release',
    RewardRelease:"Reward Release",
    LockedReward:"Locked Reward",
    FlowLockedReward:"Flow Locked Reward",
    bandwidthLockedReward:"Bandwidth Locked Reward",
    blockNumber:"Block",
    day: 'Day',
    pledge: 'Pledge',
    currentPledgeNumber: 'Total {0} Pledge',
    pledgeType: 'Pledge Type',
    node: 'Node',
    nodeAddress: 'Node',
    state: 'State',
    state11: 'Pre-Candidate Nodes',
    state12: 'Witness Node',
    state13: 'Exited Node',
    state21: 'Mining',
    state22: 'Added Pool',
    state23: 'Exit Pool',
    pledgeAddress: 'Pledge Address',
    totalPledgeAmount: 'Pledge Amount',
    currentExtractNumber: 'Total {0} Extract Data',
    extractAddress: 'Extracted Address',
    extractNumber: 'Extracted Number',
    profitValReward: 'Dividend Reward',
    extractFee: 'Fee',
    minerLock: 'PoF Pledge Lock',
    minerFreed: 'PoF Pledge Release',
    minerAddress: 'Miner',
    profitaddress: 'Profit(Lock) Address',
    freedTime: 'Time',
    freed: "Amount",
    freedDetails:"Release Details",
	  BandwidthLock:"Bandwidth Reward Lock",
    bandwidthFreed:"Bandwidth Reward Release",
    stateOk:"OK",
    Waiting:"Waiting",
    WaitingReleased:"Waiting Released",
    Released:"Released",
    ReleasedReward:"Released Reward",
    flowReleasedReward:"Flow Released Reward",
    bandwidthReleasedReward:"Bandwidth Released Reward",
    Locked:"Locked",
    ReleasedTime:"Released Time",
    blockrewardLock:"Block Reward Lock",
    blockrewardFreed:"Block Reward Release",
  },
  voter: {
    voter: 'Node&Vote',
    currentVoterNumber: 'Total {0} Vote data',
    voterRounds: 'Vote Rounds',
    voterCycle: 'Vote Cycle',
    blockInterval: 'Block Interval',
    totalVoterNumber: 'Total Vote number',
    voterStatus: 'Vote Status',
    operating: 'Operating',
    details: 'Details',
    rounds: 'The {0} Rounds',
    notStarted: 'Not Started',
    processing: 'Processing',
    over: 'Over',
    dropOutPunishment: 'Logout & Punishment',
    dropOut: 'Logout',
    punishment: 'Punishment',
    totalDropOut: 'Total {0} Logout Records',
    totalPunishment: 'Total {0} Punishment Records',
    dropOutNode: 'Logout Node',
    dropOutNumber: 'Punishment Number',
    dropOutPledge: 'Logout Pledge Number',
    dropOutTime: 'Logout Time',
    punishmentNode: 'Penalty Node',
    fractionPunishment: 'Credit Penalty',
    punishmentNumber: 'Pledge Amount',
    punishmentReason: 'Reason',
    punishmentTime: 'Time',
    absentBlock: 'Absent Block',
    unAbsent: 'Not Present'
  },
  voterInfo: {
    voterDetails: 'Vote Details',
    voter: 'Vote',
    currentNodeNumber: 'Total {0} Node Data',
    currentVoterNumber: 'Total {0} Vote Data',
    rounds: 'Rank',
    voter: 'Voter',
    totalVoter: 'Total Vote',
    voterTime: 'Vote Time',
    votesNumber: 'Votes Number',
    proportion: 'Proportion',
    witness: 'Witness Node',
    candidate: 'Candidate Node',
    type: 'Node Type',
    nodeName: 'Node Name',
    voterNode: 'Voting Node'
  },
  coins: {
    create: "Create",
    title: 'One-click Currency Issuance',
    name: 'Token Name',
    abbreviation: 'Token Abbreviation',
    number: 'Total Issuance',
    decimal: 'Decimal Places',
    address: 'Contract Management Address',
    intro: 'Token Introduction',
    next: 'Next Step',
    myToken: 'My Token',
    currentToken: 'Total {0} Token Contract',
    tokenAbbreviation: 'Abbreviation',
    status: 'Status',
    remarks: 'Remarks',
    operate: 'Operation',
    error: 'Fail',
    detail: 'Details',
    retry: 'Retry',
    sureRetry: 'Please confirm whether you want to redeploy?',
    sure: 'Confirm',
    sureTitle: 'Redeployment',
    type: 'Token Type',
    reminderTitle: 'Reminder',
    reminderContent: 'In order to maintain the stability of NFC blockchain network, please first bind the address and use the wallet to pay for it before you can issue money with one button. If the transfer payment is not made through the binding payment address or the transfer quantity does not meet the requirements, the loss caused by it shall be borne by the user.',
    collectionMessage: 'Payee Information',
    collectionAddress: 'Payee Address',
    paymentMessage: 'Payer Information',
    paymentAddress: 'Payer Address',
    modify: 'Modify',
    payNumber: 'Payment Quantity',
    confirm: 'Confirm',
    payConfirm: 'Payment confirmation, please wait',
    payConfirmLabel: 'We are confirming whether the following address and quantity have arrived. Please wait patiently',
    paySuccess: 'Congratulations, successfully issued!',
    manageAddress: 'Contract Management Address',
    view: 'Go To Check',
    check: 'check',
    bindAddress: 'Please bind the payment address',
    bind: 'Bind Address',
    release: 'Confirm Release',
    success: 'Success!'
  },
  tokenInfo: {
    issueFail: 'Sorry, the token issue failed!',
    reasonTitle: 'Reasons',
    unpaid: 'Unpaid',
    label: 'Please check whether the transfer payment is completed through the following address?',
    address: 'Address',
    number: 'Number',
    see: 'View My Token',
    deploy: 'Deployment failed'
  },
  accounts: {
    addrlist: 'Address List',
    addr: 'Address',
    currentAddrNumber: 'Total {0} Address',
    rank: 'Rank',
    balance: 'Balance',
    market: 'Percentage',
    tranTotal: 'TxCount',
    totalTran: 'Total {0} Txns',
    info: 'Overview',
    lastUpdateBlock: 'Lastest Block ',
    balanceHistory: 'Balance History',
    trendChart: 'Trend',
    waterDetails: 'Details',
    variety: 'Change(NFC)',
    amount: 'Amount(NFC)',
    scanReCode: 'Wallet Address',
    allTran: 'All Txns',
    outgoTran: 'Outputs Txns',
    acceptedTran: 'Inputs Txns',
    copySuccess: 'Copy successful'
  },
  tran: {
    info: 'Transaction Details',
    sendAddr: 'From',
    acceptAddr: 'To',
    verifyBlock: '{0} Confirmations'
  },
  api: {
    docs: 'APIs docs',
    description: 'This API is provided for developers who convert applications from NFCChain to BlockScout. It supports get and post requests.',
    show: 'Show',
    hide: 'Hide',
    accounts: 'Account',
    contract: 'Contract',
    logs: 'Logs',
    node: 'Node',
    token: 'Token',
    tokens: 'Tokens',
    params: 'Params',
    response: 'Responses'
  },
  token: {
    currentTokenNumber: 'Total {0} Tokens',
    Abbreviation: 'Abbreviation',
    totalNumber: 'Max Total Supply',//Total Circulation
    addressNumber: 'Holders',//Holding Address
    tokenAddress: 'Contract Management Address',
    decimal: 'Decimals',//Decimal Point
    bit: 'Bit',
    holder: 'Holders',
    currentPeopleNumber: 'Total {0} Holders',
    quantity: 'Quantity',
    description: 'Description',
  },


  contracts: {
    contract: "Contract",
    currentTokenNumber: "Total {0} Contracts",
    addrSearch: "Search Address",
    contractname: "Contract Name",
    Abbreviation: "Symbol", //Abbreviation
    totalNumber: "Max Total Supply", //Total Circulation
    addressNumber: "Holders", //Holding Address
    tokenAddress: "Address",
    decimal: "Decimals", //Decimal Point
    bit: "Bit",
    holder: "Holders",
    currentPeopleNumber: "Total {0} Holders",
    quantity: "Quantity",
    description: "Description",
    mainOwner: "Main Administrator",
    secondOwner: "Ordinary administrator",
    owner: "Token Rewards",//"Administrator",
    lockupperiod: "Lock period",
    releaseperiod: "Release period",
    releaseinterval: "Release interval",
    contractdetail: "Contract Details",
    overview: "Contract Overview",
    price: "Price",
    totalsupply: "Total Supply",
    holders: "Holders",
    transfers: "Transfers",
    balance: "Balance",
    contractCreator: "Contract Creator",
    contractCreator1: "Creator Address",
    contractCreator2: "Txn Hash",
    profilesummary: "More Info",
    contractAddress: "Contract Address",
    contract: "Contract",
    decimals: "Decimals",
    officialsite: "Official Site",
    socialprofiles: "Social Profiles",
    Block: "Block",
    compiler: "Compiler",
    version: "Version",
    txns: "Txns",
    verified: "Verified",
    license: "License",
    deploymenttime: "deploy time",

    morethan: "More than",
    morethanNumber: "{0} transactions found",
    txnhash: "Txn Hash",
    method: "Method",
    age: "Age",
    from: "From",
    to: "To",

    rank: "Rank",
    address: "Address",
    percentage: "Percentage",
    value: "Value",
    analytics: "Analytics",

    info: "Info",
    market: "Market",
    volume24h: "Volume (24H)",
    marketcapitalization: "Market Capitalization",
    circulatingsupply: "Circulating Supply",

    readcontract: "Read Contract",
    contractcode: "Contract Source Code (Solidity)",

    ContractABI: "Contract ABI",
    Contractbin: "Contract Creation Code",
    copyabi: "Copy ABI to clipboard",
    copysourcecode: "Copy source code to clipboard",

    contractverify: "Contract Source Code Verified (Exact Match)",
    contractnames: "Contract Name",
    compilerversion: "Compiler Version",
    optimizationenabled: "Optimization Enabled",
    othersettings: "Other Settings",


    contractadminmsg: "Are you the contract creator? ",
    contractverified: "Verify and Publish",
    contractselfmsg: " your contract source code today!",

  },

  verifycontract: {
    VerifyContract: "Verify Contract",
    VerifyContractTitle: "Verify Contract Source Code",
    contractaddress:
      "Please enter the Contract Address you would like to verify",
    contractname: "Please enter the Contract Name you would like to verify",
    compilertype: "Please select Compiler Type",
    compilerversion: "Please select Compiler Version",
    licensetype: "Please select Open Source License Type",
    pleaseselect: "Please select",
    uploadcontract: "Upload contract source code file",
    selectfile: "Select contract source code file",
    placeholder: "Please enter the contract address",
    verify: "VERIFY",
    verifystatus: "Verify Status",
    verifyresult: "Verify Result:",
  },

  Transactions: {
    title:
      "More than > {counts} transactions found (Showing the last {lastcnt} records) ",
    currentTranNumber: "Total {0} transactions",
    currentBurntTranNumber:
      ",Total Burnt: {0},transactions Burnt: {1},Other Burnt: {2}",
    balanceTranNumber: "Total Burnt:",
    txinTranNumber: ",Transactions Burnt:",
    lockTranNumber: ",Lock Burnt:",
    gasTranNumber: ",Gas Burnt:",
    pledgeTranNumber: ",Pledge Burnt:",
    nontxTranNumber: ",Other Burnt:",
    otherBurnt: "Non Transactions Burnt",
    addrSearch: "Search From or To Address",

    TxnHash: "Txn Hash",
    Hash: "Hash",
    Method: "Method",
    Block: "Block",
    Age: "Age",
    From: "From",
    To: "To",
    Value: "Value",
    TxnFee: "Txn Fee",
    time: "time",
    TransactionDetails: "Transaction Details",
    Transactionhash: "Transaction hash",
    Transactiontime: "Transaction time",
    status: "Transaction Status",
    Blocks: "Blocks",
    Nonce: "Nonce",
    TransactionAmount: "Transaction Amount",
    HandlingFee: "Handling Fee",
    GasUsed: "Gas used",
    GasLimit: "Gas limit",
    GasPrice: "Gas Price",

    AdditionalInfo: "Additional Info",
    BlockConfirmations: "{0} Block Confirmations",
    TransactionFee: "Transaction Fee",
    GasInfo: "Gas Info",
    GasContent: "{0} Gas Used From {0} Gas Limit@{0}({0})",
    intheposition: "in the position {0}",
    Seemoredetails: "See more details",

    type: "Transaction Type",
    common: "Ordinary transaction",
    stProof: "PoSR proof",
    Bind: "Binding income address",
    Unbind: "Unbind revenue address",
    Rebind: "Rebind",
    Deposit: "System Settings",
    stReq: "PoSR pledge",
    stExit: "PoSR pledge exit",
    stset: "Parameter setting",
    stRent: "Lease Request",
    stRentPg: "Lease Pledge",
    stReNew: "Renewal Request",
    stReNewPg: "Renew Pledge",
    stRescind: "Rescind",
    stReValid: "Space Reclamation Proof",
    chPrice: "Adjust lease price",
    CndLock: "Node pledge lock parameter setting",
    RwdLock: "Reward Lock Parameter Setting",
    ExchRate: "SRT exchange rate Setting",
    Exch: "SRT exchange",
    CandReq: "Node pledge",
    CandExit: "Node pledge exit",
    CandPnsh: "CandPnsh",
    FlwLock: "Lease lock parameter settings",
    chbw: "Modify Storage bandwidth",
    TlcChAdmin1: "administrator permission transfer",
    TlcPickup: "user withdrawal amount",
    ContractNew: "New Contract",
    TokenNew: "create a new token",
    TokenTransfer: "token transfer",
    stCatchUp: "supplementary pledge deposit",
    CandEntrust: "POS entrusted pledge",
    CandETExit: "POS entrusted pledge exit",
    CandChaRate:"Modify Charge rate",

    newaddrsss: "new administrator address",
    withdrawalamount: "withdrawal amount",
    useraddrsss: "extract account",
    transferamount: "Transfer amount",
    contractaddress: "Contract address",

    trandestroy: "Transaction Burnt",
    lockdestroy: "Lock Burnt",
    gasdestroy: "Gas Burnt",
    pledgedestroy: "Pledge Burnt",
  },

  

  validate: {
    coinType: 'Token type cannot be empty',
    circulationTotal: 'Total issuance cannot be empty',
    coinCode: 'Token short name cannot be empty',
    coinName: 'Token name cannot be empty',
    contractManageAddress: 'Contract management address cannot be empty',
    description: 'Token introduction cannot be empty',
    keepDecimal: 'Decimal place cannot be empty',
    username: 'User account cannot be empty',
    password: 'Please enter a 6-20 digit password',
    email: 'E-mail can not be empty',
    captcha: 'Graphic calculation results cannot be empty',
    emailCode: 'Email verification code cannot be empty',
    confirmPassword: 'Password entered again cannot be empty',
    payAddress: 'Payment address cannot be empty'
  },
  mymanage: {
    minermanage: "Miner Manage",
    minerlist: "Miner List",
    address: "Address",
    paylog: "Paylog",
    my: "My",
    overview: "Overview",
    TrafficMiner:"Traffic Miner",
    BlockMiner:"Block Miner",
    fulconversionrecord:"FUL Converted Record",
    rechargerecord: "FUL Converted Record",
    nodemanagement: "Block Miner",
    minersmanagement: "Traffic Miner",
    producedBlock:"Produced Block",
    releaserecord:"Release Record",
    blockreward:"Block Reward",
    age:"Age",
    miningrecords: "Mining Records",
    notconnectedwallet: "You have not connected the wallet",
    connecttowallet: "Connect to a Wallet",
    loginaddress: "Address",
    nfcamount: "Balance",
    numberofminers: "Traffic Miners",
    lastloginint: "Last_login",
    nodenumber: "Block Miners",
    theremaining: "FUL Amount",
    pay: "Pay",
    estimate: "Estimate",
    payfulnum: "FUL Quantity",
    nfcnumber: "NFC Number",
    payaddress: "From",
    payTime: "Time",
    payrecord: "Record",
    address: "Address",
    blockheight: "Block",
    transformaddr: "The wallet user has been switched. Whether to switch the search address at the same time ?",
    walletswitch: "Wallet User Switch",
    miner: "Miner",
    node: "Node",
    earnings: "Earnings",
    balance: "Balance",
    tradingrecord: "Trading Record",
    time: "Time",
    amount: "Amount(NFC)",
    change: "Change(NFC)",
    convert:"Convert",
    burntnfc:"Burnt NFC",
    FlowReward:"Flow Reward",
    BandwidthReward:"Bandwidth Reward",
    FULAmount:"FUL Amount",
    Receivingaddress:"Receiving address",
    totalblock:"Total {0} NFC earned from block produced",
    Totalflowmining:"Total {0} NFC earned from flow mining",
    Totalbandwidthmining:"Total {0} NFC earned from bandwidth mining",

  },
  mymanageNode: {
    node: "Node",
    nodeType: "Node type",
    pledgenum: "Pledge Amount",
    punilshamount: "Punishment Number",
    makegood: "Penalty Point",
    quit: "Exit the Pledge",
    estimate: "Estimate",
    payaddress: "Payment Address",
    paynumber: "Penalty Point",
    nfcnumber: "NFC payment quantity",
    paytime: "Time",
    payheight: "Block",
    candidateNode: "Pre-Candidate Node",
    witnessNode: "Witness Node",
    pledgeNode: "Pledge",
    pledge: "Pledge",
    pledgetime: "Pledge Time(UTC)",
    pledgeheight: 'Block',
    pledgelog: 'Pledge Log',
    punishmentlog: ' Credit Score Recharge Log',
  },

  mymanageExtract:{
    withdraw :"Withdraw Currency",
    exchangewithdrawl :"Exchange Withdraw",
    exchangerecord :"Exchange list",
    currentExchangeNumber: 'Total {0}  Data',   
    transactionrecord :"Extract transaction records",
    currentTranNumber: 'Total {0} Transactions',
    order: "#",
    exchangeaddress :"exchange address",
    receivingaddress:"receiving address",
    transhash: "transaction hash",
    blockheight: "block height",
    exchangetranshash: "exchange hash",
    exchgnum  :"test coins quantity",
    exchgtoken  :"exchange quantity",
    exchangetype :"exchange type",
    exchgmode:"exchange mode",
    lockedquantity : 'locked quantity',
    extractablequantity: "extractable quantity",
    extractquantity: "Extracted quantity",
    extractNumber: "Extract quantity",  
    transfertime :"lock time",
    lockuptime :"lockup time",
    releasetime: "release time",
    exchangemode: "exchange mode",
    operation: 'operate',
    extract: "Withdraw",
    contractaddress:"Contract address",
    walletaddress: "Wallet address",
    tranValue: 'Value',
    handleFee: 'Fee',
    from: 'From',
    to: 'To',
    status: 'Status',
    finish: "Finish",
  }, 


  mymanageMining: {
    miner: "Miner",
    mineraddr: "Miner Address",
    revenueaddress: "Revenue Address",
    nowrevenuesaddress: "Current Revenue address",
    pledgeamount: "Pledge Amount",
    bandwidth: "Bandwidth",
    minermode: "Mode",
    minerstatus: "Status",
    revenueamount: "Revenue Amount",
    bandwidthlog:"Bandwidth Log",
    adjustbandwidth: "Change bandwidth ",
    nowbandwidth: "Current Bandwidth",
    havejoined: "Joined",
    nottojoin: "Unjoined",
    allege: "Bandwidth Allege",
    quit: "Quit",
    join: "Join a Pool",
    time: "Time",
    submit: "Submit",
    miningparticulars: "Mining Details",
    jointime: "Join Time",
    freed: "Release Amount",
    lockamount: "Locked Amount",
    payearnings: "Pay/Earnings Address",
    expendful: "Expend Amount FUL",
    miningearnings: "Mining Earnings",
    waitingextracting: "Waiting for Extracting",
    theremaining: "FUL Amount",
    miningpool: "Mining Pool",
    add: "Add",
    alreadyexits: "Already Exits",
    waitingmining: "Waiting for Mining",
    mining: "Mining",
    flowmining: "Flow Mining",
    bandwidthmining: "Bandwidth Mining",
    revenuesaddress: "Revenues Address",
    pleasetoyaddr: "Please switch the wallet to the original revenue address",
    dotoaddr: "Do not use the original revenue address",
    transferaddress: "Change Revenue Address",
    originaladdress: "Original Revenue Address",
    newaddress: "New Revenue Address",
    transfer: "Transfer",
    addminers: "New Miners",
    Growthfh:"24h Flow Growth",
    Rewardh:"24h Reward"
  },
  mininglog: {
    payearnings: "Pay/Earnings Address",
    expendful: "Expend FUL",
    minersNumber: "Miners",
    payfulnum: "FUL Quantity",
    theremaining: "FUL Amount",
    miningearnings: "Mining Earnings",
    unlockedquantity: "Accumulate Unlocked",
    day: "Day",
    unlocktime: "Unlock Time",
    earnings: "Earnings",
    miningProportion:"Earnings / Proportion",
    locknumber: "Accumulate Lock",
    expendful: "Expend FUL",
    bandwidth: "Bandwidth",
    flow: "Flow",
    oreremoval: "Ore Removal Time",
    Rewardtype:"Reward Type"
  },
  pledge: {

    successfultest: "Successful Test",
    pledge: "Pledge",
    allege: "Bandwidth Allege",
    bandwidthpledge: "Bandwidth Pledge",
    jump: "Jump",
    operator: "Operator",
    mineraddr: "Miner Address",
    andwidthtest: "Bandwidth Test",
  },
  binding: {
    automatically: "Automatically",
    privatekey: "Miner Private Key",
    minerurl: "Miner Url",
    bindaddr: "Bind Revenue Address",
    upkey: "Upload the Private Key",
  },
  loadingSubPan: {
    state: "State",
    loading: "Trading in Progress",
    finish: "Finish",
    failure: "Failure",
    close: "Close Window",
    ok: "ok",
    Hasbeenused:"Has Been Used"
  },
  flowmining: {
    minerx: "Miner",
    mining: "Flow Mining",
    miner: "Miner",
    flowminer:"Flow Miner",
    flowmining: "Flow Mining",
    currentlyminer: "There is currently {0} miner",
    bandwidth: "Bandwidth",
    pledgequantity: "Pledge Amount",
    generatedtraffic: "Generated Traffic",
    remainingfull: "FUL Amount",
    totalrevenue: "Total Revenue",
    lockquantity: "Lock Amount",
    releasedquantity: "Released",
    extracted: "Extracted",
    jointime: "Join time",
    name: "Miner({0}) --> Ore pool --> Revenue Address( ",
    minersearch: "Search by Address",
    minerview: "Mining Details",
    minerSearch: "Select Time",
    order: "Serial Number",
    Minersaddress: "Miner's Address",
    time: "Time",
    miningflow: "Mining Flow",
    consumeful: "Consume FUL",
    revenueaddress: "Revenue Address",
    miningquantity: "Mining Quantity",
    lastminingtime: "Last Mining Time",
    bandwidthmbps: "Bandwidth(Mbps)",
    currentlyflowmining: "There are currently {0} traffic mining records",
    flowminingsearch: "Search mining address or revenue address",
    trans_hash: "Transaction Hash",
    report_time: "Billing Cycle Start Time",
    flow_value: "Flow Value",
    fulnum: "Consume FUL",
    profitamount: "Mining Income",
    instime: "Time",
    flmining: "Mining",
    miningview: "Traffic Transaction",
    en_address: "Miner's Address",
    router_ipaddr: "Routing Node Wallet Address",
    from_addr: "Client Additional Information",
    to_addr: "EN Node Additional Information",
    FlowGrowthh:"24h Flow Growth",
    TotalNetworkFlow:"Total Network Flow",
    NetworkFlow:"Network Flow",
    FlowProportion:"Network Flow / Proportion",
    Rewardh:"24h Reward",
    AdjPower:"Adj.Power",
    AdjPowerProportion:"Adj.Power / Proportion",
    TrafficMiner:"Traffic Miner",
    ToPTrafficMiners:"Traffic Miners",
  },
  ftable: {
    order: "#",
    totalnumber: "Total {0}",
    totalnumberrelease:"Total {0} release records",
    action: "Action",
    searchAddress:"Search by Address",
    totalnumberproduced:"Total {0} block produced",
    totalnumbertraffic:"Total {0} Traffic Miner",
  },
  utilsmsg: {
    copyok: "Copy OK",
  },
  messages: {
    addresslocked:"The address is locked and cannot be pledged",
    addressused:"The revenue address has been used!",
    greaterZero:"The input value must be greater than zero",
    pleaseaddress: "Please enter the correct wallet address",
    norepeatedpledge: "No Repeated Pledge",
    required: "Required",
    confirm: "Confirm",
    cancel: "Cancel",
    notkey: "Please enter the correct private key",
    copy: "Copy",
    mnemonic: "Mnemonic",
    privatekey: "Private Key",
    wallet: "Wallet",
    newwallet: "New Wallet",
    closewindowbefore: "Before closing the window, you need to back up the mnemonic",
    notnetworkinkey: "Browsers don't store your mnemonics and private keys",
    notnetwokin: "Do not disclose the mnemonic to anyone, and do not save it on the Internet",
    bearinmind: "Bear in Mind",
    clickcopy: "Click to Copy",
    pleaserevenue: "Please enter the correct revenue address",
    pleaseminer: "Please switch the wallet user to the miner address",
    binding: "Binding",
    jump: "Jump",
    jumppledgetext: "Have you completed binding, confirm to skip pledge?",
    search: "Search",
    pledgok:"Successful Pledge",
    copykey: "Copy Privatekey",
    minerprivatekey:"The wallet private key for the miner's address",
    newaddress: "The New Address",
    joinsuccess: "Join the Success!",
    notifypool: "Notify the ore pool",
    requestbinding: "Request the Binding",
    getcontract: "To get the contract",
    randomnumber: "Get random number",
    bindingsignature: "Binding Signature",
    signature: "Signature",
    pleaseconfirm: "Please Confirm !",
    confirmed: "Confirmed. It may take some time to wait for results",
    bindinglift: "Unbind",
    pleasebrowser: "Please open it using your browser",
    pleasesupload:"Please save your private key and upload it to the mining machine",
    upwallet:"You can change the binding address by swapping wallets",

    notifywallet: "Notify Wallets",
    InsufficientBalance:"Insufficient wallet balance!"
  },
  additions: {
    miningpledge:"Mining Pledge",
    actualbandwidth:"Actual Bandwidth",
    interval:"Interval",
    freedupstage:"Freed up Stage",
    lockupstage:"Lock up Stage",
    exchangeratio:"FUL Convert Ratio",
    pledgenfc:"Pledge NFC",
    deviceatype: "Device Type",
    multisignature: "Multisignature Address",
    contractaddress: "Contract Address",
    revenuetype: "Revenue Type",
    deviceaddress: "Device Address",
    fuladdr: "FUL Collection Address",
    fulnumber: "FUL Number",
    flowpledge:"Flow Pledge",
    blockpledge:"Block Pledge"
  },
  charts:{
    totalflowchart:"NetWork Flow Trend",
    growth:"Growth",
    totalflow:"Total Flow"
  },
  
  flowConsumption:{
    time:"Time",
    blockNumber:"Block",
    sourceAddress:"Miner Address",
    target:"Consumption address",
    flow:"Flow",
    consume:"Consume FUL",
    minerRewards:"Miner rewards",
    flowConsumption:"Flow consumption details",
    startDate:"Start Date",
    endDate:"End Date",
    flowunitprice:"Flow unit price"
    }
}
